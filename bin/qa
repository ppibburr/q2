require "gtk3"
#!/usr/bin/env ruby
fst=Time.now
$: << File.join(File.dirname(__FILE__), "/../lib")
require "readline"
require 'ruby2vala'
require 'ruby_parser'
load File.dirname(__FILE__)+"/q"

def run_action data=nil
setup

# Open a pipe that can be used to communicate between two processes
pipe_main, pipe_fork = IO.pipe

pid = fork do
  # The code in the fork block runs in another, forked Ruby process
  # It won't interfere with your main process

  begin
    # First, close the main process' end of the pipe
    pipe_main.close
      perform 4,data
      finish
    # Run the evil code here and dump any objects of interest into the pipe
    #Marshal.dump some_object, pipe_fork
  rescue => e
    raise e
    # Dump any exception to the pipe
    Marshal.dump $!, pipe_fork
  end

  # Close the pipe end of the forked process and exit
  pipe_fork.flush
  pipe_fork.close
  exit!
end

# The following code will run in parallel to the forked process above

# First, close the forked process' end of the pipe
pipe_fork.close
# Read objects of interest from the pipe
#some_object = Marshal.load pipe_main
# Wait for the forked process to end
Process.wait pid
# Close the pipe end of the main process
pipe_main.close

# The forked process might also raise an exception, so you might want to re-raise it
#raise some_object if some_object.is_a? Exception
end


class ExampleAppWindow < Gtk::ApplicationWindow

  def open(file)
    
  end
end

class ExampleApp < Gtk::Application
  def initialize
    super("org.gtk.exampleapp", :handles_open)
      p :init
    signal_connect "activate" do |application|
      @window ||= ExampleAppWindow.new application
      p :activate
    end
    signal_connect "open" do |application, files, hin|
      p "open"
    end
    
    simple_action = Gio::SimpleAction.new("test", GLib::VariantType.new("s"));
	simple_action.signal_connect('activate') do |a,q|
	  hold();
	  print("action\n");
	  cmd, *_ = q.split("\n")
	  ARGV.clear
	  cmd.split(" ").each do |q| ARGV << q end
	  if i=ARGV.index("-")
	    ARGV[i] = 'BUFFER'
	  end
      
      run_action _ ? _.join("\n") : nil
	  
	  release();
	end
	add_action(simple_action);    
  end
  
  def me
    p :fuck
  end
end

app = ExampleApp.new

if !ARGV[0]
puts app.run([$0]+ARGV)
else
  app.register(nil)
  app.activate_action('test', GLib::Variant.new(ARGV[0]+"\n"+$stdin.read))
end
